html, body {
    margin: 0;
}

html {
    /*
    hack for dynamic unit
    1rem = 1in when width of camera is 1920px
    */
    font-size: calc(0.05 * min(100vw, calc(100vh * 4 / 3)));
}

body {
    font-size: 16px;
}

.container {
    width: 100vw;
    height: 100vh;
    background-color: black;
    display: flex;
    align-items: center;
    justify-content: center;
}

.camera {
    position: relative;
    width: min(100vw, calc(100vh * 4 / 3));
    height: min(100vh, calc(100vw * 3 / 4));
    background: radial-gradient(circle at 50% -100%, #404040, #101010);
    perspective: 18rem;
    overflow: hidden;
}

#world {
    position: relative;
    width: 100%;
    height: 100%;
    transform-style: preserve-3d;
    transform: translateZ(0) rotateX(0) translateZ(-0);
    transition: transform 2s ease-in-out;
    pointer-events: none;
}

.computer {
    position: absolute;
    left: 50%;
    top: 50%;
    width: 12rem;
    height: 9rem;
    transform:
        translate(-50%,-50%)
        rotateX(10deg)
    ;
    background-color: #606060;
    box-shadow: inset 0 0 calc(1rem / 24) #202020;
    pointer-events: all;
    --screen-color: lime;
}

/*
https://dev.to/ekeijl/retro-crt-terminal-screen-in-css-js-4afh
http://aleclownes.com/2017/02/01/crt-display.html
https://css-tricks.com/old-timey-terminal-styling/
*/
.screen {
    position: absolute;
    top: .25rem;
    right: .25rem;
    bottom: .25rem;
    left: .25rem;
    background:
        radial-gradient(
            color-mix(in srgb, var(--screen-color) 12.5%, black), transparent 150%
        ),
        #202020
    ;
    padding: .5rem;
    box-shadow: 0 0 .04rem color-mix(in srgb, var(--screen-color), transparent);
    text-shadow: 0 0 calc(1rem / 24) var(--screen-color);
    font-family: "Consolas";
    font-size: 24px;
    color: var(--screen-color);
}

.screen::after {
    content: "";
    position: absolute;
    display: block;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    background:
        linear-gradient(
            rgba(18, 16, 16, 0) 50%,
            rgba(0, 0, 0, 0.25) 50%
        ),
        linear-gradient(
            90deg,
            rgba(255, 0, 0, 0.06),
            rgba(0, 255, 0, 0.02),
            rgba(0, 0, 255, 0.06)
        )
    ;
    background-size: 100% 2px, 3px 100%;
    pointer-events: none;
}

.content {
    height: 100%;
    overflow-y: scroll;
    scrollbar-width: thin;
    scrollbar-color: var(--screen-color) transparent;
}

.content::-webkit-scrollbar {
    width: calc(1rem / 24);
    background-color: transparent;
}

.content::-webkit-scrollbar-thumb {
    background-color: var(--screen-color);
}

.output, .input {
    margin: 0;
    display: inline;
    white-space: break-spaces;
    word-break: break-all;
    outline: none;
}

.input.empty {
    caret-color: transparent;
}

@keyframes cursor {
    0% {
        visibility: visible;
    }
    50% {
        visibility: hidden;
    }
}

.input.empty::after {
    content: "â–ˆ";
    animation: cursor 1s infinite step-end;
}

.paper {
    position: absolute;
    left: 50%;
    top: 50%;
    width: 8.5rem;
    height: 11rem;
    background-color: beige;
    padding: 1rem;
    transform:
        translate(-50%,-50%)
        translate3d(0,5rem,8rem)
        rotateX(90deg)
    ;
    overflow-y: scroll;
    font-size: 12pt;
    font-family: "Courier New";
    pointer-events: all;
    scrollbar-width: thin;
    scrollbar-color: black transparent;
}

.paper::-webkit-scrollbar {
    width: calc(1rem / 8);
    background-color: transparent;
}

.paper::-webkit-scrollbar-thumb {
    background-color: #00000080;
}

:is(.computer, .paper):hover:not(.selected) {
    outline: white solid .25rem;
}
